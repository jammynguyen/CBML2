// file: <projectsDir>\dat\appl.env  (former file name wdogMSM.env)
// 03.01.10 KS (Stancovici) Version for Xiangtan 5m PM MSM
// 16.02.10 UL (Uli Löffler) according to the information of A. Geisler wdog can read 'servers' section
//             also appl.env. Thus using appl.env has the advantage that 'appl' and wdog are consistent


// WATCHDOG Parameters
//In the watchdog's Environment file there is an Environment named WatchedApplication. This Environment contains name/value pairs where the name is a server name and the value is an Environment. This Environment in turn contains name/value pairs (attributes) specifying set­tings for the monitored applications. 
//
//Example (see also: <subsysDir>\HTML-DIR\start.html SB1APPL, chapter 5.1.1.2
//
//Here is an example configuration: 
//
//file: wdog.env
//
//
//
//crashCheckEvery 5000 // milliseconds, default: 2000
//deleteLogsEvery 10000 // milliseconds, default: 5000
//
//WatchedApplication env
//{
//  timeout   60000   // milliseconds, default: 120000
//  
//  server1 env    // server name
//  {
//    startCommand     "server1"   // default: ""
//    hmiVarName    "ComStat_server1" // default: ""
//    timeout   90000
//    startupTimeout  120000
//  }
//  server2 env
//  {
//    startCommand     "server2"
//    hmiVarName    "ComStat_server2"
//  }
//  server3 env
//  {
//    startCommand     "server3"
//    hmiVarName    "ComStat_server3"
//  }
//} 
//
//Note the following: 
//
//·            Attributes always have a default value. If the default value of an attribute is appropriate in your application, you do not need to specify this attribute. 
//
//·            If an attribute value is suitable for all monitored applications, define it within the WatchedApplication Environment, like attribute timeout in the 5th line of the example. 
//
//·            If the global value for an attribute is not suitable for a certain application, you may override it in the application-specific (sub)environments. E.g. in the Environment for server1, the value of attribute timeout is overridden. 
//
//·            Applications for which all default values are suitable need not be mentioned within WatchedApplication at all. Nevertheless, you have to include them in the list-variable servers. 
//
//Variable crashCheckEvery 
//
//This is the cycle time the wdog uses to check whether all applications configured in variable servers are running. For this purpose, wdog uses operating system specific APIs (e.g. on Windows: psapi.lib) similar to the Unix command ps. The default is 2000 milliseconds. CAUTION: It may be necessary to increase this value to avoid doubly started processes at startup time of the wdog, when it starts all processes causing system load to be high. 
//
//Variable deleteLogsEvery 
//
//This is the cycle time the wdog uses to check and delete log files as necessary, using the configuration attribute diskLimitPercent in Dbg.env.. 
//
//Attributes of variable WatchedApplication 
//
//The attributes have the following meaning: 
//
//timeout: If an application does not put heartbeat information in the process shared memory within this time (given in milliseconds), the application will be killed.
//If you do not want an application to be killed, set its timeout to 0. The default value is 120000 mil­liseconds (2 minutes). 
//
//startupTimeout: This attribute is like timeout, but is only valid as a timeout for the first monitor­ing cycle after the watchdog started the application. Use this attribute for applications that need a long time until they are able to put their first heartbeat information into the shared memory after startup. The default value is the value of timeout. The value must be greater or equal than the value of timeout. 
//
//delayAfterStart: The number of milliseconds the wdog shall wait before starting the next application. This wait is only performed if there is a next application. 
//
//useSpawn: If set to 1 (default and preferred!), the wdog uses an API call (spawn) to start applications, otherwise it uses a call to system(), i.e. a shell command. The argument to either call is the string specified in attribute startCommand. If useSpawn is 1, start, /min and “...” are ignored if they are present in startCommand. If useSpawn is 0, make sure that the startCommand starts the application without blocking, e.g. using & on Unix or using the start command on Windows. 
//
//console: Only relevant if useSpawn is set to 1. If set to 1, applications are started inside a console window. Default is 0. Note that if the wdog is started as a Windows service, the “allow desktop interaction” checkbox must be checked in the service properties, otherwise a console window cannot be opened. 
//
//displayAbortDialog: If set to 0 (default) the command line option –noabort_dialog (See package UTIL) is appended to each startCommand if configuration attribute timeout > 0. If set to 1, startCommand remains unchanged. 
//
//startCommand: A command string (default is the empty string) to start the application, default is the empty string. The watchdog starts an application when he detects that the application is not running. 
//
//If startCommand is "" (empty string), the watchdog cannot start the application. Use an empty start­Command if your applications are restarted automatically by a different service, e.g. a Windows NT Cluster Service. 
//
//maxRestarts: The maximum number of times the application may be restarted after a crash. If this limit is reached, the application will not be restarted until resetRestartCounterAfter milliseconds have elapsed (see next attribute). Proper termination of a program (i.e. program exit at the end of main()) does not count as a crash. The default is 5. 
//
//resetRestartCounterAfter: See explanation of maxRestarts. The default is 86 400 000 milliseconds (1 day). 
//
//hmiVarName: This is the name of a boolean HMI variable that the watchdog uses to visualize whether a process is running or not. The default is "" (no visualization). 
//
//kill: a boolean (0/1) attribute indicating whether the watchdog shall kill the application on timeout. The default value is 1. 
//
//killCommand1: The shell command used to kill the process. The default value is the empty string, meaning that an API function is used to kill the process (TerminateProcess on Windows and signal 9 on Unix). On Unix, you may for example set this attribute to “kill –6 “ (results in a core file being written). 
//
//killCommand2: The command used to kill the process if killCommand1 did not succeed. The de­fault value the empty string. 
//
//killTimeout: The time in milliseconds in which the process has to be down after killCommand1 has been called. When this time elapses, killCommand2 is called. The default value is 5000 on Win­dows and 60000 on Unix. It's longer on Unix because the process may need time to write a core file. 
//
//Important Hint (deprecated) 
//
//Note that on Windows XP/2003, the utility to kill a process is called taskkill, so you can define 
//
//killCommand1 “taskkill /pid”
//killCommand2 “taskkill /f /pid” 
//                 

crashCheckEvery 5000 // milliseconds, default: 2000               
deleteLogsEvery 10000 // milliseconds, default: 5000              

// used for WINCC
msg_area FP1
msg_servername          wdogMSM
msg_msg_servername      msg

hmi_servername          hmi

maxRestarts  500    // 500 time watchdog is checking the applications

/* to be read from appl.env
servers
{
 
///// noncontrol   *******************
  wdogMSM
///// control *******************
  msmNC

/////   HMI   *******************
  HmiServerMSM   
  shmMSM
}
*/


WatchedApplication env
{     
  timeout   60000   // milliseconds, default: 120000
  useSpawn   1
  console    0      // if set to 0 than application will run in background 
  kill 1       
  
    ///   HMI    
    HmiServerLP env
    {
        console         1
        //timeout       0         // no main() of libappl.lib => appl -stop does not work!
        startCommand   'start /MIN "HmiServerLP" <PROJECT_DIR>\..\..\MT_HMI_PA_LP\projectLP\runbin\MiddleWareServer -name HmiServerLP -config=<PROJECT_DIR>\..\..\MT_HMI_PA_LP\projectLP\dat\MiddlewareServer\cis.config'
    }
    
    ReportServer env
    {
        console         1
        timeout       0         // no main() of libappl.lib => appl -stop does not work!
        startCommand   'start /MIN "ReportServer" <PROJECT_DIR>\..\..\MT_HMI_PA_LP\projectLP\runbin\ReportServer -name ReportServer -config=<PROJECT_DIR>\..\..\MT_HMI_PA_LP\projectLP\dat\ReportServer\cis.config'
    }
    
    Communication env
    {
        console        1
        timeout        0         // no main() of libappl.lib => appl -stop does not work!
		startCommand   'start /MIN "startCommSoft" <PROJECT_DIR>\bat\jobs\02_Server\Start_Communication.bat'
		killCommand1   'start /MIN "kill1CommSoft" <PROJECT_DIR>\bat\jobs\02_Server\Stop_Communication.bat'
		killCommand2   'start /MIN "kill1CommSoft" <PROJECT_DIR>\bat\jobs\02_Server\Stop_Communication.bat'
		resetRestartCounterAfter 5000
		killTimeout              10000
    }
 
  

   
}
